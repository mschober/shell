#!/usr/bin/perl -w
use strict;

# The purpose of this applicaiton is to move files between perforce branches if for some reason you aren't able to perform a p4 integrate
# A potential optimization is to check adds/deletes for renames or highly similar content.

use Getopt::Long;
use File::Basename qw/ dirname /;

my $quiet    = 0;
my $dryrun   = 0;
my $perforce = 1;

sub main {
    GetOptions (
        'f|from=s' => \my $source_tree,
        't|to=s'   => \my $destination_tree,
        'd|dryrun' => \$dryrun,
        'q|quiet'  => \$quiet,
        'p|p4=i'   => \$perforce,
    );

    $source_tree      = real_directory($source_tree);
    $destination_tree = real_directory($destination_tree);

    my (@adds, @edits, @deletes, @unrecognized);

    while (my $file = <STDIN>) {
        next unless $file =~ /\w/;
        chomp($file);

        $file =~ s/$source_tree\///;

        my $source_file      = "${source_tree}/${file}";
        my $destination_file = "${destination_tree}/${file}";
        my $destination_directory = dirname($destination_file);

        my $source_exists      = -e $source_file;
        my $destination_exists = -e $destination_file;

        if ($source_exists && $destination_exists) {
            push(@edits, $file);
            run_cmd(" p4 edit $destination_file ")
                if $perforce;
            run_cmd(" cp $source_file $destination_file ");
        } elsif ($source_exists && !$destination_exists) {
            push(@adds, $file);
            run_cmd(" cp $source_file $destination_file ");
            run_cmd(" mkdir -p $destination_directory ");
            run_cmd(" p4 add $destination_file ")
                if $perforce;
        } elsif (!$source_exists && $destination_exists) {
            push(@deletes, $file);
            run_cmd(" p4 delete $destination_file ")
                if $perforce;
        } else {
            push(@unrecognized, $file);
        }
    }

    print_summaries($source_tree, $destination_tree, \@adds, \@edits, \@deletes, \@unrecognized);
}

sub run_cmd {
    my $cmd = shift;

    if (!$quiet) {
        print("$cmd\n");
    }

    if (!$dryrun) {
        system($cmd);
    }
}

sub real_directory {
    my $dir = shift;
    if (!-d $dir) {
        die "Unable to locate directory $dir";
    }

    my $output = `cd $dir && pwd -P`;
    chomp($output);
    return $output;
}

sub print_summaries {
    my ($source_tree, $destination_tree, $adds, $edits, $deletes, $unrecognized) = @_;
    print <<HERE;
Transplanting files:
From: $source_tree
To:   $destination_tree

Adds:
    @{[ join("\n    ", @$adds) ]}

Edits:
    @{[ join("\n    ", @$edits) ]}

Deletes:
    @{[ join("\n    ", @$deletes) ]}

Unrecognized:
    @{[ join("\n    ", @$unrecognized) ]}
HERE
}


main();
